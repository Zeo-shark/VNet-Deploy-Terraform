# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform-apply'

on:
  push:
    branches: [ "main" ]
  #pull_request:    

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform-apply'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Install Azure CLI
      run: |
        # Install the Azure CLI
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
    - name: Verify Azure CLI installation
      run: az --version
      
    - uses: actions/checkout@v2.1.0
    - uses: jitterbit/get-changed-files@v1
      id: abc
      with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}
 
    - name: Printing
      run: |
          echo "All:"
          echo "TF_VAR_FILE=${{ steps.abc.outputs.all }}" >> $GITHUB_ENV
          echo "${{ steps.abc.outputs.all }}"
          echo "Added:"
          echo "${{ steps.abc.outputs.added }}"
          echo "Removed:"
          echo "${{ steps.abc.outputs.removed }}"
          echo "Renamed:"
          echo "${{ steps.abc.outputs.renamed }}"
          echo "Modified:"
          echo "${{ steps.abc.outputs.modified }}"
          echo "Added+Modified:"
          echo "${{ steps.abc.outputs.added_modified }}"
 
 
   
    # https://github.com/actions/setup-node
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt #-check

    - name: Terraform Plan 
      run: terraform plan -var-file=${{ env.TF_VAR_FILE}} -var 'credentials={client_id="${{ secrets.AZURE_AD_CLIENT_ID }}",client_secret="${{ secrets.AZURE_AD_CLIENT_SECRET }}",tenant_id="${{ secrets.AZURE_AD_TENANT_ID }}",object_id="${{ secrets.AZURE_OBJECT_ID }}"}' 
 
  
 
      # On push to "main", build or change infrastructure according to Terraform configuration files 
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks 
    - name: Terraform Apply 
      # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push' 
      run: terraform apply -var-file=${{ env.TF_VAR_FILE}} -auto-approve -var 'credentials={client_id="${{ secrets.AZURE_AD_CLIENT_ID }}",client_secret="${{ secrets.AZURE_AD_CLIENT_SECRET }}",tenant_id="${{ secrets.AZURE_AD_TENANT_ID }}",object_id="${{ secrets.AZURE_OBJECT_ID }}"}' 

    - name: Terraform Output
      run: |
        terraform output -json
        terraform output -json > terraform_outputs.json
